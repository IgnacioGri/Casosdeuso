@page "/"
@page "/generator"
@using MudBlazor
@using UseCaseGenerator.Shared.DTOs
@using UseCaseGenerator.Shared.Models
@using UseCaseGenerator.Client.Services
@using UseCaseGenerator.Client.Components
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject IUseCaseService UseCaseService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Generador de Casos de Uso - ING</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudPaper Class="pa-6" Elevation="3">
        
        <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">
            Generador de Casos de Uso
        </MudText>
        
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="2">
                        <MudText Typo="Typo.h4" Class="mb-4">Paso @currentStep de @maxSteps</MudText>
                        <MudProgressLinear Color="Color.Primary" Value="@progressValue" Size="Size.Large" Class="mb-4" />
                        
                        @if (currentStep == 1)
                        {
                            <AIConfigurationStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 2)
                        {
                            <UseCaseTypeStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 3)
                        {
                            <BasicInfoStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 4)
                        {
                            <DescriptionStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 5 && formData.UseCaseType == UseCaseType.Entity)
                        {
                            <EntityFieldsStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 6 && formData.UseCaseType == UseCaseType.Entity)
                        {
                            <FiltersColumnsStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == 5 && formData.UseCaseType != UseCaseType.Entity) || (currentStep == 7 && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <BusinessRulesStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == 6 && formData.UseCaseType != UseCaseType.Entity) || (currentStep == 8 && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <WireframesFlowsStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == 7 && formData.UseCaseType != UseCaseType.Entity) || (currentStep == 9 && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <TestCasesStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == maxSteps && formData.UseCaseType != UseCaseType.Entity) || (currentStep == maxSteps && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <ReviewGenerateStep FormData="formData" OnGenerate="GenerateUseCase" />
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
        
        <!-- Navigation Buttons -->
        <MudCardActions Class="pa-4">
            <MudButton Variant="Variant.Outlined" 
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       OnClick="PreviousStep"
                       Disabled="@(currentStep <= 1)">
                Anterior
            </MudButton>
            
            <MudSpacer />
            
            @if (currentStep < maxSteps)
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.ArrowForward"
                           OnClick="NextStep">
                    Siguiente
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Success"
                           StartIcon="@Icons.Material.Filled.Send"
                           OnClick="GenerateUseCase"
                           Disabled="isGenerating">
                    @if (isGenerating)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <span style="margin-left: 8px;">Generando...</span>
                    }
                    else
                    {
                        <span>Generar Caso de Uso</span>
                    }
                </MudButton>
            }
        </MudCardActions>
        
    </MudPaper>
</MudContainer>

@code {
    private int currentStep = 1;
    private int maxSteps => formData.UseCaseType == UseCaseType.Entity ? 9 : 6;
    private double progressValue => (double)currentStep / maxSteps * 100;
    private UseCaseFormData formData = new();
    private bool isGenerating = false;

    protected override async Task OnInitializedAsync()
    {
        // Load saved form data from local storage if available
        await LoadFormData();
    }

    private void UpdateFormData(UseCaseFormData updatedData)
    {
        formData = updatedData;
        // Save to local storage
        _ = SaveFormData();
        StateHasChanged();
    }

    private void NextStep()
    {
        if (currentStep < maxSteps)
        {
            currentStep++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
            StateHasChanged();
        }
    }

    private async Task GenerateUseCase()
    {
        isGenerating = true;
        StateHasChanged();

        try
        {
            var request = new GenerateUseCaseRequest
            {
                FormData = formData,
                Rules = "Generar caso de uso siguiendo est√°ndares ING"
            };

            var response = await UseCaseService.GenerateUseCaseAsync(request);
            
            if (response.Success)
            {
                Snackbar.Add("Caso de uso generado exitosamente", Severity.Success);
                // Navigate to result page or show result
            }
            else
            {
                Snackbar.Add($"Error al generar caso de uso: {response.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error inesperado: {ex.Message}", Severity.Error);
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task LoadFormData()
    {
        try
        {
            var savedData = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "useCaseFormData");
            if (!string.IsNullOrEmpty(savedData))
            {
                var data = System.Text.Json.JsonSerializer.Deserialize<UseCaseFormData>(savedData);
                if (data != null)
                {
                    formData = data;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            // Ignore errors loading from localStorage
        }
    }

    private async Task SaveFormData()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(formData);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "useCaseFormData", json);
        }
        catch (Exception)
        {
            // Ignore errors saving to localStorage
        }
    }
}