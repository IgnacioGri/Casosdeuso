@page "/"
@page "/generator"
@using MudBlazor
@using UseCaseGenerator.Shared.DTOs
@using UseCaseGenerator.Shared.Models
@using UseCaseGenerator.Client.Services
@using UseCaseGenerator.Client.Components
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject IUseCaseService UseCaseService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDocumentService DocumentService

<PageTitle>Generador de Casos de Uso - ING</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudPaper Class="pa-6" Elevation="3">
        
        <MudGrid AlignItems="Center" Spacing="2" GutterBottom="true">
            <MudItem xs="12" sm="8" md="6" Class="d-flex align-center">
                @* Logo responsive: logo completo en pantallas grandes, logo pequeño en móvil *@
                <img src="/images/ingematica-logo-full.png" 
                     alt="Ingematica Logo" 
                     class="mud-hidden-xs-down" 
                     style="height: 40px; object-fit: contain; margin-right: 16px;" />
                <img src="/attached_assets/company-logo.png" 
                     alt="Ingematica Logo" 
                     class="mud-hidden-sm-and-up" 
                     style="height: 32px; width: 32px; object-fit: contain; margin-right: 12px;" />
                <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-0 mud-hidden-xs-down">
                    Generador de Casos de Uso
                </MudText>
            </MudItem>
        </MudGrid>
        
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
            <MudGrid>
                <MudItem xs="12">
                    <EnhancedProgressIndicator CurrentStep="@currentStep" TotalSteps="@maxSteps" UseCaseType="@formData.UseCaseType" />
                    <MudPaper Class="pa-4" Elevation="2">
                        
                        @if (currentStep == 1)
                        {
                            <AIConfigurationStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 2)
                        {
                            <UseCaseTypeStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 3)
                        {
                            <BasicInfoStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 4)
                        {
                            <DescriptionStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 5 && formData.UseCaseType == UseCaseType.Entity)
                        {
                            <EntityFieldsStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if (currentStep == 6 && formData.UseCaseType == UseCaseType.Entity)
                        {
                            <FiltersColumnsStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == 5 && formData.UseCaseType != UseCaseType.Entity) || (currentStep == 7 && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <BusinessRulesStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == 6 && formData.UseCaseType != UseCaseType.Entity) || (currentStep == 8 && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <WireframesFlowsStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == 7 && formData.UseCaseType != UseCaseType.Entity) || (currentStep == 9 && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <TestCasesStep FormData="formData" OnUpdate="UpdateFormData" />
                        }
                        else if ((currentStep == maxSteps && formData.UseCaseType != UseCaseType.Entity) || (currentStep == maxSteps && formData.UseCaseType == UseCaseType.Entity))
                        {
                            <ReviewGenerateStep FormData="formData" OnGenerate="GenerateUseCase" />
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
        
        <!-- Navigation Buttons -->
        <MudCardActions Class="pa-4">
            <MudButton Variant="Variant.Outlined" 
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       OnClick="PreviousStep"
                       Disabled="@(currentStep <= 1)">
                Anterior
            </MudButton>
            
            <MudSpacer />
            
            @if (currentStep < maxSteps)
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.ArrowForward"
                           OnClick="NextStep">
                    Siguiente
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Success"
                           StartIcon="@Icons.Material.Filled.Send"
                           OnClick="GenerateUseCase"
                           Disabled="isGenerating">
                    @if (isGenerating)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <span style="margin-left: 8px;">Generando documento...</span>
                    }
                    else
                    {
                        <span>Generar y Descargar</span>
                    }
                </MudButton>
            }
        </MudCardActions>
        
    </MudPaper>
</MudContainer>

<!-- Preview Dialog removed - DOCX generated and downloaded directly -->

@code {
    private int currentStep = 1;
    private int maxSteps => formData.UseCaseType == UseCaseType.Entity ? 11 : 8;
    private double progressValue => (double)currentStep / maxSteps * 100;
    private UseCaseFormData formData = new();
    private bool isGenerating = false;
    private GenerateUseCaseResponse? generatedResponse = null;

    private bool isExporting = false;

    protected override async Task OnInitializedAsync()
    {
        // Load saved form data from local storage if available
        await LoadFormData();
    }

    private void UpdateFormData(UseCaseFormData updatedData)
    {
        formData = updatedData;
        // Save to local storage
        _ = SaveFormData();
        StateHasChanged();
    }

    private void NextStep()
    {
        if (currentStep < maxSteps)
        {
            currentStep++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
            StateHasChanged();
        }
    }

    private async Task GenerateUseCase()
    {
        isGenerating = true;
        StateHasChanged();

        try
        {
            var request = new GenerateUseCaseRequest
            {
                FormData = formData,
                Rules = "Generar caso de uso siguiendo estándares ING"
            };

            var response = await UseCaseService.GenerateUseCaseAsync(request);
            
            if (response.Success)
            {
                generatedResponse = response;
                
                // Update form data with expanded description if available
                if (!string.IsNullOrEmpty(response.ExpandedDescription) && response.ExpandedDescription != formData.Description)
                {
                    formData.Description = response.ExpandedDescription;
                    StateHasChanged();
                }
                
                // Generate and download DOCX directly
                await ExportDocx();
            }
            else
            {
                Snackbar.Add($"Error al generar caso de uso: {response.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error inesperado: {ex.Message}", Severity.Error);
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task LoadFormData()
    {
        try
        {
            var savedData = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "useCaseFormData");
            if (!string.IsNullOrEmpty(savedData))
            {
                var data = System.Text.Json.JsonSerializer.Deserialize<UseCaseFormData>(savedData);
                if (data != null)
                {
                    formData = data;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            // Ignore errors loading from localStorage
        }
    }

    private async Task SaveFormData()
    {
        try
        {
            var json = System.Text.Json.JsonSerializer.Serialize(formData);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "useCaseFormData", json);
        }
        catch (Exception)
        {
            // Ignore errors saving to localStorage
        }
    }

    private async Task ExportDocx()
    {
        if (generatedResponse == null || !generatedResponse.Success || generatedResponse.UseCase == null)
        {
            Snackbar.Add("No hay contenido para exportar", Severity.Warning);
            return;
        }

        isExporting = true;
        StateHasChanged();

        try
        {
            // Pass formData to DownloadDocxAsync (REQUIRED - HTML conversion is deprecated)
            var docxBytes = await DocumentService.DownloadDocxAsync(
                generatedResponse.Content, 
                generatedResponse.UseCase.FileName ?? "caso-de-uso",
                formData // Pass the complete form data for proper DOCX generation
            );
            
            // Convert to base64 and download
            var base64 = Convert.ToBase64String(docxBytes);
            var fileName = $"{generatedResponse.UseCase.FileName ?? "caso-de-uso"}.docx";
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, $"data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,{base64}");
            
            Snackbar.Add("Documento DOCX exportado exitosamente", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al exportar DOCX: {ex.Message}", Severity.Error);
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    // HTML export removed - DOCX generated and downloaded directly
}