@page "/generator"
@using MudBlazor
@using UseCaseGenerator.Shared.DTOs
@using UseCaseGenerator.Shared.Models
@using UseCaseGenerator.Client.Services
@inject IUseCaseService UseCaseService
@inject IFormStateService FormStateService
@inject IAIAssistService AIAssistService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>Generador de Casos de Uso</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Elevation="2" Class="pa-6">
        <MudText Typo="Typo.h4" GutterBottom="true" Color="Color.Primary">
            Generador de Casos de Uso
        </MudText>
        
        <MudStepper @ref="stepper" Color="Color.Primary" Variant="Variant.Filled" DisableSkipStepIcon="false">
            
            <!-- Step 1: AI Configuration -->
            <MudStep Title="Configuración IA" Icon="@Icons.Material.Filled.Psychology">
                <ChildContent>
                    <AIConfigurationStep @bind-FormData="formData" />
                </ChildContent>
            </MudStep>
            
            <!-- Step 2: Use Case Type -->
            <MudStep Title="Tipo de Caso" Icon="@Icons.Material.Filled.Category">
                <ChildContent>
                    <UseCaseTypeStep @bind-FormData="formData" />
                </ChildContent>
            </MudStep>
            
            <!-- Step 3: Basic Information -->
            <MudStep Title="Información Básica" Icon="@Icons.Material.Filled.Info">
                <ChildContent>
                    <BasicInfoStep @bind-FormData="formData" />
                </ChildContent>
            </MudStep>
            
            <!-- Step 4: Description -->
            <MudStep Title="Descripción" Icon="@Icons.Material.Filled.Description">
                <ChildContent>
                    <DescriptionStep @bind-FormData="formData" />
                </ChildContent>
            </MudStep>
            
            <!-- Step 5: Entity Fields (if Entity type) -->
            @if (formData.UseCaseType == UseCaseType.Entity)
            {
                <MudStep Title="Campos de Entidad" Icon="@Icons.Material.Filled.TableRows">
                    <ChildContent>
                        <EntityFieldsStep @bind-FormData="formData" />
                    </ChildContent>
                </MudStep>
                
                <MudStep Title="Filtros y Columnas" Icon="@Icons.Material.Filled.FilterList">
                    <ChildContent>
                        <FiltersColumnsStep @bind-FormData="formData" />
                    </ChildContent>
                </MudStep>
            }
            
            <!-- Step 6/7: Business Rules -->
            <MudStep Title="Reglas de Negocio" Icon="@Icons.Material.Filled.Rule">
                <ChildContent>
                    <BusinessRulesStep @bind-FormData="formData" />
                </ChildContent>
            </MudStep>
            
            <!-- Step 7/8: Wireframes and Flows -->
            <MudStep Title="Wireframes y Flujos" Icon="@Icons.Material.Filled.AccountTree">
                <ChildContent>
                    <WireframesFlowsStep @bind-FormData="formData" />
                </ChildContent>
            </MudStep>
            
            <!-- Step 8/9: Test Cases -->
            <MudStep Title="Casos de Prueba" Icon="@Icons.Material.Filled.BugReport">
                <ChildContent>
                    <TestCasesStep @bind-FormData="formData" />
                </ChildContent>
            </MudStep>
            
            <!-- Final Step: Review and Generate -->
            <MudStep Title="Revisar y Generar" Icon="@Icons.Material.Filled.CheckCircle">
                <ChildContent>
                    <ReviewGenerateStep @bind-FormData="formData" OnGenerate="GenerateUseCase" />
                </ChildContent>
            </MudStep>
            
        </MudStepper>
        
        <!-- Navigation Buttons -->
        <MudCardActions Class="pa-4">
            <MudButton Variant="Variant.Outlined" 
                       OnClick="PreviousStep" 
                       Disabled="@(stepper?.GetActiveIndex() == 0)"
                       StartIcon="@Icons.Material.Filled.NavigateBefore">
                Anterior
            </MudButton>
            
            <MudSpacer />
            
            @if (stepper?.GetActiveIndex() < stepper?.Steps.Count - 1)
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           OnClick="NextStep"
                           EndIcon="@Icons.Material.Filled.NavigateNext">
                    Siguiente
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Success" 
                           OnClick="GenerateUseCase"
                           StartIcon="@Icons.Material.Filled.AutoAwesome"
                           Disabled="isGenerating">
                    @if (isGenerating)
                    {
                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ml-2">Generando...</MudText>
                    }
                    else
                    {
                        <text>Generar Caso de Uso</text>
                    }
                </MudButton>
            }
        </MudCardActions>
        
        <!-- Auto-save indicator -->
        <MudAlert Severity="Severity.Info" Class="mt-4" Dense="true">
            <MudIcon Icon="@Icons.Material.Filled.CloudSync" Class="mr-2" />
            Los cambios se guardan automáticamente
        </MudAlert>
        
    </MudPaper>
</MudContainer>

@code {
    private MudStepper? stepper;
    private UseCaseFormData formData = new();
    private bool isGenerating = false;

    protected override async Task OnInitializedAsync()
    {
        // Load saved form state
        var savedFormData = await FormStateService.LoadFormStateAsync();
        if (savedFormData != null)
        {
            formData = savedFormData;
        }
        
        // Auto-save on form changes
        FormStateService.OnFormStateChanged += StateHasChanged;
    }

    private async Task NextStep()
    {
        if (stepper != null)
        {
            stepper.NextStep();
            await SaveFormState();
        }
    }

    private async Task PreviousStep()
    {
        if (stepper != null)
        {
            stepper.PreviousStep();
            await SaveFormState();
        }
    }

    private async Task SaveFormState()
    {
        await FormStateService.SaveFormStateAsync(formData);
    }

    private async Task GenerateUseCase()
    {
        isGenerating = true;
        try
        {
            var request = new GenerateUseCaseRequest
            {
                FormData = formData,
                Rules = GetINGRules()
            };

            var response = await UseCaseService.GenerateUseCaseAsync(request);
            
            if (response.Success)
            {
                Snackbar.Add("Caso de uso generado exitosamente", Severity.Success);
                
                // Clear form state and navigate to result
                await FormStateService.ClearFormStateAsync();
                Navigation.NavigateTo($"/result/{response.UseCase?.Id}");
            }
            else
            {
                Snackbar.Add($"Error al generar: {response.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isGenerating = false;
        }
    }

    private string GetINGRules()
    {
        return @"
REGLAS ING PARA CASOS DE USO:

1. FORMATO DE DOCUMENTO:
   - Encabezado corporativo ING con logo y colores (#0070C0)
   - Tipografía: Segoe UI Semilight
   - Estructura jerárquica clara (h1, h2, h3)

2. CONTENIDO OBLIGATORIO:
   - Información general (cliente, proyecto, código)
   - Descripción detallada del caso de uso
   - Historia de revisiones y aprobaciones (tabla mandatory)
   - Actores y precondiciones
   - Flujo normal paso a paso
   - Flujos alternativos (mínimo 2)
   - Reglas de negocio numeradas
   - Requerimientos especiales

3. ESTÁNDARES TÉCNICOS:
   - Código formato: 2 letras + 3 números + nombre
   - Verbos en infinitivo para nombres de casos de uso
   - Listas numeradas multi-nivel (1., a., i.)
   - Campos de auditoría estándar para entidades

4. CALIDAD DE CONTENIDO:
   - Terminología bancaria profesional
   - Descripción clara y sin ambigüedades
   - Validaciones específicas por tipo de dato
   - Manejo de errores y excepciones detallado
";
    }

    public void Dispose()
    {
        FormStateService.OnFormStateChanged -= StateHasChanged;
    }
}