@using MudBlazor
@using UseCaseGenerator.Shared.DTOs
@using UseCaseGenerator.Shared.Models
@using UseCaseGenerator.Client.Components
@inject HttpClient Http
@inject ISnackbar Snackbar

<style>
.step-number-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background-color: #003f5f;
    color: white;
    font-size: 14px;
    font-weight: 600;
    font-family: 'Segoe UI Semibold', 'Segoe UI', system-ui, sans-serif;
}

.test-steps-container {
    margin-top: 16px;
}
</style>

<MudGrid>
    <MudItem xs="12">
        <div class="d-flex justify-space-between align-center mb-4">
            <div>
                <div class="d-flex align-center">
                    <MudText Typo="Typo.h5" GutterBottom="true" Color="Color.Primary" Class="mr-2">
                        Casos de Prueba
                    </MudText>
                </div>
                <MudText Typo="Typo.body1">
                    Configura la generación de casos de prueba automáticos o define casos específicos manualmente.
                </MudText>
            </div>
            
            @if (FormData.GenerateTestCase)
            {
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Secondary"
                           Size="Size.Small"
                           StartIcon="@Icons.Material.Filled.AutoAwesome"
                           OnClick="GenerateIntelligentTestCases"
                           Disabled="@isGenerating"
                           Style="border-color: #9c27b0; color: #9c27b0;">
                    @if (isGenerating)
                    {
                        <AdaptiveLoading 
                            IsLoading="true"
                            LoadingText="Generando casos de prueba..."
                            AnimationType="spin"
                            ShowProgressText="true"
                            CompactMode="true" />
                    }
                    else
                    {
                        <span>Generar con IA</span>
                    }
                </MudButton>
            }
        </div>
    </MudItem>
    
    <!-- Test Case Generation Toggle -->
    <MudItem xs="12">
        <MudCheckBox @bind-Checked="FormData.GenerateTestCase"
                     T="bool"
                     Label="Generar casos de prueba automáticamente"
                     Class="mb-4" />
    </MudItem>
    
    @if (FormData.GenerateTestCase)
    {
        <!-- Test Case Configuration -->
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h6" Class="mb-3">Configuración de Pruebas</MudText>
            
            <BulletTextarea @bind-Value="FormData.TestCaseObjective"
                            Label="Objetivo de las pruebas"
                            Lines="4"
                            Placeholder="Describe el objetivo con bullet points. Ej:
• Validar la funcionalidad completa de gestión de usuarios
• Verificar controles de seguridad y permisos
• Comprobar integridad de datos en todas las operaciones..."
                            Class="mb-3" />
            
            <BulletTextarea @bind-Value="FormData.TestCasePreconditions"
                            Label="Precondiciones de prueba"
                            Lines="5"
                            Placeholder="Describe las precondiciones con bullet points. Ej:
• Usuario autenticado con permisos adecuados
• Datos de prueba cargados en el sistema
• Conexión a base de datos disponible
• Ambiente de pruebas configurado correctamente..."
                            Class="mb-3" />
        </MudItem>
        
        <!-- Test Steps -->
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h6" Class="mb-3">Pasos de Prueba</MudText>
            
            <div class="d-flex align-center mb-2">
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="AddTestStep">
                    Agregar Paso
                </MudButton>
                <MudSpacer />
                <MudText Typo="Typo.body2" Color="Color.Default">
                    @FormData.TestSteps.Count pasos definidos
                </MudText>
            </div>
            
            @if (FormData.TestSteps.Any())
            {
                <div class="test-steps-container">
                    @foreach (var step in FormData.TestSteps.OrderBy(s => s.Number))
                    {
                        <MudCard Class="mb-4" Style="border: 1px solid #e0e0e0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <div class="d-flex align-center justify-space-between">
                                        <div class="d-flex align-center">
                                            <div class="step-number-badge">
                                                @step.Number
                                            </div>
                                            <MudText Typo="Typo.h6" Class="ml-2">
                                                Paso @step.Number
                                            </MudText>
                                        </div>
                                        <div class="d-flex align-center">
                                            <MudSelect @bind-Value="step.Status"
                                                       Variant="Variant.Outlined"
                                                       Dense="true"
                                                       Placeholder="---"
                                                       Style="width: 80px; margin-right: 8px;">
                                                <MudSelectItem Value="@TestStepStatus.Empty">---</MudSelectItem>
                                                <MudSelectItem Value="@TestStepStatus.Passed">P</MudSelectItem>
                                                <MudSelectItem Value="@TestStepStatus.Failed">F</MudSelectItem>
                                            </MudSelect>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                           Color="Color.Error"
                                                           Size="Size.Small"
                                                           OnClick="() => RemoveTestStep(step)" />
                                        </div>
                                    </div>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <BulletTextarea @bind-Value="step.Action"
                                                        Label="Acción"
                                                        Lines="3"
                                                        Placeholder="Describe la acción con bullet points. Ej:
• Acceder al módulo de gestión de usuarios
• Hacer clic en el botón 'Nuevo Usuario'
• Completar formulario con datos válidos..."
                                                        Class="mb-3" />
                                    </MudItem>
                                    
                                    <MudItem xs="12">
                                        <BulletTextarea @bind-Value="step.InputData"
                                                        Label="Datos de Entrada"
                                                        Lines="3"
                                                        Placeholder="Especifica los datos necesarios con bullet points. Ej:
• Nombre: Juan Pérez
• DNI: 12345678
• Email: juan.perez@example.com
• Rol: Usuario estándar..."
                                                        Class="mb-3" />
                                    </MudItem>
                                    
                                    <MudItem xs="12">
                                        <BulletTextarea @bind-Value="step.ExpectedResult"
                                                        Label="Resultado Esperado"
                                                        Lines="3"
                                                        Placeholder="Define el resultado esperado con bullet points. Ej:
• Usuario creado exitosamente en el sistema
• Mensaje de confirmación mostrado
• Usuario visible en la grilla de usuarios
• Email de bienvenida enviado automáticamente..."
                                                        Class="mb-3" />
                                    </MudItem>
                                    
                                    <MudItem xs="12">
                                        <BulletTextarea @bind-Value="step.Observations"
                                                        Label="Observaciones"
                                                        Lines="3"
                                                        Placeholder="Agrega observaciones importantes con bullet points. Ej:
• Verificar validación de formato de email
• Comprobar unicidad del DNI
• Validar permisos del usuario actual
• Registrar operación en log de auditoría..."
                                                        Class="mb-3" />
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    }
                </div>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Dense="true">
                    No hay pasos de prueba definidos
                </MudAlert>
            }
        </MudItem>
        
        <!-- Quick Test Templates -->
        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="mb-3">Plantillas de Prueba</MudText>
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               StartIcon="@Icons.Material.Filled.Create"
                               OnClick="AddCRUDTestSteps"
                               FullWidth="true">
                        Pruebas CRUD
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               StartIcon="@Icons.Material.Filled.Security"
                               OnClick="AddSecurityTestSteps"
                               FullWidth="true">
                        Pruebas Seguridad
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               StartIcon="@Icons.Material.Filled.Search"
                               OnClick="AddSearchTestSteps"
                               FullWidth="true">
                        Pruebas Búsqueda
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               StartIcon="@Icons.Material.Filled.AccountBalance"
                               OnClick="LoadBankingTestExample"
                               FullWidth="true">
                        Ejemplo Bancario
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Info">
                Los casos de prueba no se generarán automáticamente. 
                Podrás crearlos más tarde usando la funcionalidad de casos de prueba inteligentes.
            </MudAlert>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter] public UseCaseFormData FormData { get; set; } = new();
    [Parameter] public EventCallback<UseCaseFormData> FormDataChanged { get; set; }
    
    private bool isGenerating = false;

    private async Task GenerateIntelligentTestCases()
    {
        isGenerating = true;
        try
        {
            var request = new IntelligentTestCaseRequest
            {
                FormData = FormData,
                AiModel = FormData.AiModel
            };

            var response = await Http.PostAsJsonAsync("api/intelligent-test-cases", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<IntelligentTestCaseResponse>();
                
                if (result != null && result.Success)
                {
                    // Update form data with the intelligent test case results
                    FormData.TestCaseObjective = result.Objective;
                    FormData.TestCasePreconditions = result.Preconditions;
                    FormData.TestSteps = result.TestSteps;
                    
                    await FormDataChanged.InvokeAsync(FormData);
                    Snackbar.Add("Casos de prueba generados exitosamente", Severity.Success);
                }
                else
                {
                    Snackbar.Add(result?.Error ?? "Error al generar casos de prueba", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Error al comunicarse con el servidor", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al generar casos de prueba: {ex.Message}", Severity.Error);
        }
        finally
        {
            isGenerating = false;
        }
    }

    private async Task AddTestStep()
    {
        var newStep = new TestStep
        {
            Number = FormData.TestSteps.Count + 1,
            Action = "",
            InputData = "",
            ExpectedResult = "",
            Observations = "",
            Status = TestStepStatus.Pending
        };

        FormData.TestSteps.Add(newStep);
        await FormDataChanged.InvokeAsync(FormData);
    }

    private async Task RemoveTestStep(TestStep step)
    {
        FormData.TestSteps.Remove(step);
        
        // Renumber remaining steps
        for (int i = 0; i < FormData.TestSteps.Count; i++)
        {
            FormData.TestSteps[i].Number = i + 1;
        }

        await FormDataChanged.InvokeAsync(FormData);
    }

    private async Task AddCRUDTestSteps()
    {
        var crudSteps = new[]
        {
            new TestStep { Number = 1, Action = "Crear nuevo registro", InputData = "Datos válidos completos", ExpectedResult = "Registro creado exitosamente", Observations = "Verificar mensaje de confirmación" },
            new TestStep { Number = 2, Action = "Consultar registro creado", InputData = "ID del registro", ExpectedResult = "Datos mostrados correctamente", Observations = "Verificar todos los campos" },
            new TestStep { Number = 3, Action = "Modificar registro existente", InputData = "Datos actualizados", ExpectedResult = "Registro modificado exitosamente", Observations = "Verificar cambios aplicados" },
            new TestStep { Number = 4, Action = "Eliminar registro", InputData = "ID del registro", ExpectedResult = "Registro eliminado exitosamente", Observations = "Verificar que no aparece en búsquedas" }
        };

        FormData.TestSteps.Clear();
        FormData.TestSteps.AddRange(crudSteps.Select(s => new TestStep 
        { 
            Number = s.Number, 
            Action = s.Action, 
            InputData = s.InputData, 
            ExpectedResult = s.ExpectedResult, 
            Observations = s.Observations,
            Status = TestStepStatus.Pending
        }));

        await FormDataChanged.InvokeAsync(FormData);
    }

    private async Task AddSecurityTestSteps()
    {
        var securitySteps = new[]
        {
            new TestStep { Number = 1, Action = "Intentar acceso sin autenticación", InputData = "URL directa", ExpectedResult = "Redirección a login", Observations = "No debe permitir acceso" },
            new TestStep { Number = 2, Action = "Intentar acceso con usuario sin permisos", InputData = "Usuario limitado", ExpectedResult = "Mensaje de acceso denegado", Observations = "Verificar mensaje claro" },
            new TestStep { Number = 3, Action = "Verificar timeout de sesión", InputData = "Sesión inactiva > 30 min", ExpectedResult = "Sesión expirada automáticamente", Observations = "Debe solicitar re-login" }
        };

        FormData.TestSteps.Clear();
        FormData.TestSteps.AddRange(securitySteps.Select(s => new TestStep 
        { 
            Number = s.Number, 
            Action = s.Action, 
            InputData = s.InputData, 
            ExpectedResult = s.ExpectedResult, 
            Observations = s.Observations,
            Status = TestStepStatus.Pending
        }));

        await FormDataChanged.InvokeAsync(FormData);
    }

    private async Task AddSearchTestSteps()
    {
        var searchSteps = new[]
        {
            new TestStep { Number = 1, Action = "Buscar por filtro principal", InputData = "Criterio válido", ExpectedResult = "Resultados filtrados correctamente", Observations = "Verificar paginación" },
            new TestStep { Number = 2, Action = "Buscar sin criterios", InputData = "Filtros vacíos", ExpectedResult = "Todos los registros mostrados", Observations = "Verificar límite de resultados" },
            new TestStep { Number = 3, Action = "Buscar con criterio inexistente", InputData = "Valor que no existe", ExpectedResult = "Mensaje 'No se encontraron resultados'", Observations = "Mensaje claro al usuario" }
        };

        FormData.TestSteps.Clear();
        FormData.TestSteps.AddRange(searchSteps.Select(s => new TestStep 
        { 
            Number = s.Number, 
            Action = s.Action, 
            InputData = s.InputData, 
            ExpectedResult = s.ExpectedResult, 
            Observations = s.Observations,
            Status = TestStepStatus.Pending
        }));

        await FormDataChanged.InvokeAsync(FormData);
    }

    private async Task LoadBankingTestExample()
    {
        FormData.TestCaseObjective = "Verificar el correcto funcionamiento del módulo de gestión de clientes premium, incluyendo operaciones CRUD, validaciones de negocio y cumplimiento de normativas bancarias.";
        
        FormData.TestCasePreconditions = "Usuario autenticado con perfil Ejecutivo de Cuentas Premium, base de datos con al menos 10 clientes de prueba, servicios externos de scoring crediticio disponibles.";

        var bankingSteps = new[]
        {
            new TestStep { Number = 1, Action = "Ingresar al módulo de clientes premium", InputData = "Credenciales válidas", ExpectedResult = "Pantalla principal con grilla de clientes", Observations = "Verificar carga inicial < 3 segundos" },
            new TestStep { Number = 2, Action = "Buscar cliente por DNI", InputData = "DNI: 12345678", ExpectedResult = "Cliente encontrado con datos completos", Observations = "Verificar scoring crediticio actualizado" },
            new TestStep { Number = 3, Action = "Crear nuevo cliente premium", InputData = "Datos completos válidos", ExpectedResult = "Cliente creado con beneficios aplicados", Observations = "Verificar auditoría registrada" },
            new TestStep { Number = 4, Action = "Intentar crear cliente con DNI duplicado", InputData = "DNI existente", ExpectedResult = "Error de validación claro", Observations = "Mensaje específico de duplicación" }
        };

        FormData.TestSteps.Clear();
        FormData.TestSteps.AddRange(bankingSteps.Select(s => new TestStep 
        { 
            Number = s.Number, 
            Action = s.Action, 
            InputData = s.InputData, 
            ExpectedResult = s.ExpectedResult, 
            Observations = s.Observations,
            Status = TestStepStatus.Pending
        }));

        await FormDataChanged.InvokeAsync(FormData);
    }
}