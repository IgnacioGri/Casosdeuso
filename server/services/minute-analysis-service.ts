import { AIService } from './ai-service.js';
import { UseCaseFormData } from '../../shared/schema.js';

type UseCaseType = 'entity' | 'api' | 'service' | 'reports';

export class MinuteAnalysisService {
  constructor(private aiService: AIService) {}

  async analyzeMinute(text: string, useCaseType: UseCaseType, aiModel: string): Promise<Partial<UseCaseFormData>> {
    // If demo mode is selected, return demo data immediately
    if (aiModel === 'demo') {
      return this.generateDemoAnalysis(useCaseType);
    }
    
    const prompts = this.buildAnalysisPrompts(useCaseType);
    
    try {
      // Use AI to analyze the minute text
      const analysisResult = await AIService.processFieldWithAI(
        prompts.systemPrompt,
        text,
        aiModel
      );

      // Parse the AI response into form data
      return this.parseAnalysisResult(analysisResult, useCaseType);
    } catch (error) {
      console.error('Error analyzing minute:', error);
      
      // Fallback to demo analysis if AI fails
      return this.generateDemoAnalysis(useCaseType);
    }
  }

  private buildAnalysisPrompts(useCaseType: UseCaseType) {
    const baseSystemPrompt = `
Eres un analista de sistemas experto en casos de uso seg√∫n est√°ndares ING.
Analiza el texto de la minuta proporcionada y extrae la informaci√≥n relevante para completar autom√°ticamente un formulario de caso de uso.

IMPORTANTE: Responde √öNICAMENTE con un objeto JSON v√°lido sin explicaciones adicionales.
`;

    const context = {
      step: 'minute-analysis',
      useCaseType,
      action: 'parse-minute'
    };

    switch (useCaseType) {
      case 'entity':
        return {
          systemPrompt: baseSystemPrompt + this.getEntityAnalysisRules(),
          context
        };
      case 'api':
        return {
          systemPrompt: baseSystemPrompt + this.getApiAnalysisRules(),
          context
        };
      case 'service':
        return {
          systemPrompt: baseSystemPrompt + this.getServiceAnalysisRules(),
          context
        };
      case 'reports':
        return {
          systemPrompt: baseSystemPrompt + this.getReportsAnalysisRules(),
          context
        };
      default:
        return {
          systemPrompt: baseSystemPrompt + this.getEntityAnalysisRules(),
          context
        };
    }
  }

  private getEntityAnalysisRules(): string {
    return `
Para casos de uso tipo ENTIDAD, extrae y estructura la siguiente informaci√≥n:

INSTRUCCIONES CR√çTICAS DE EXTRACCI√ìN:
1. clientName: Es el nombre de la EMPRESA/BANCO/ORGANIZACI√ìN cliente (NO el nombre del caso de uso)
   - Buscar palabras como "Banco", "Cohen", "Macro", "Provincia", nombres de empresas
   - Ejemplo correcto: "Cohen Aliados Financieros", "Banco Macro", "Banco Provincia"
   
2. projectName: Es el nombre del PROYECTO o SISTEMA (NO el caso de uso)
   - Buscar frases como "Sistema de", "M√≥dulo de", "Plataforma de"
   - Si no est√° expl√≠cito, inferir del contexto (ej: si habla de proveedores, podr√≠a ser "Sistema de Gesti√≥n de Proveedores")
   - NO dejar vac√≠o si se puede inferir del contexto
   
3. useCaseCode: Es el C√ìDIGO alfanum√©rico del caso de uso
   - Formato: letras+n√∫meros (ej: PV003, BP005, UC001)
   - NO confundir con nombres o descripciones
   
4. useCaseName: Es el NOMBRE del caso de uso (acci√≥n + entidad)
   - DEBE empezar con verbo infinitivo
   - Ejemplo: "Gestionar Clientes", "Mostrar proveedores", "Consultar Saldos"
   - NO poner aqu√≠ el nombre del cliente ni proyecto

5. description: Descripci√≥n del QU√â HACE el caso de uso
   - Si viene muy corta (menos de 10 palabras), devolver tal cual viene
   - NO expandir aqu√≠, solo extraer lo que dice la minuta

NUNCA MEZCLAR:
- NO poner el nombre del cliente en useCaseName
- NO poner el nombre del caso de uso en clientName
- NO dejar projectName vac√≠o si se puede inferir

üö® REGLA CR√çTICA DE fileName:
- El fileName NUNCA debe incluir extensiones como .json, .docx, .xml, .txt, etc.
- Formato correcto: solo c√≥digo + descripci√≥n sin extensiones
- Ejemplo correcto: "ST003GestionarTransferencias" (NO "ST003GestionarTransferencias.json")
- Si encuentras extensiones, elim√≠nalas completamente

{
  "clientName": "Nombre de la empresa/banco cliente",
  "projectName": "Nombre del proyecto o sistema",
  "useCaseCode": "C√≥digo alfanum√©rico del caso de uso", 
  "useCaseName": "Nombre del caso de uso con verbo infinitivo",
  "fileName": "Nombre de archivo siguiendo patr√≥n: c√≥digo+descripci√≥n",
  "description": "Descripci√≥n del objetivo del caso de uso tal como viene en la minuta",
  "actorName": "actor principal del caso de uso o 'Actor no identificado' si no est√° expl√≠cito",
  "searchFilters": ["usar SOLO filtros mencionados en la minuta"],
  "filtersDescription": "Descripci√≥n de los filtros de b√∫squeda necesarios",
  "resultColumns": ["usar SOLO columnas mencionadas en la minuta"],
  "columnsDescription": "Descripci√≥n de las columnas que se mostrar√°n en resultados",
  "entityFields": [
    {
      "name": "usar SOLO campos mencionados en la minuta",
      "type": "tipo seg√∫n el campo",
      "mandatory": true,
      "length": 50,
      "description": "Descripci√≥n clara del prop√≥sito del campo",
      "validationRules": "Reglas de validaci√≥n espec√≠ficas"
    }
  ],
  "fieldsDescription": "Descripci√≥n de los campos de la entidad",
  "wireframeDescriptions": ["usar SOLO pantallas mencionadas en la minuta"],
  "wireframesDescription": "Descripci√≥n de las pantallas necesarias",
  "alternativeFlows": ["usar SOLO flujos alternativos mencionados en la minuta"],
  "alternativeFlowsDescription": "Descripci√≥n de flujos alternativos y errores",
  "businessRules": "‚ö†Ô∏è FORMATO OBLIGATORIO: Usar BULLETS (‚Ä¢) exclusivamente, NO listas numeradas. Usar SOLO reglas mencionadas en la minuta. Ejemplo: ‚Ä¢ Regla de validaci√≥n ‚Ä¢ Regla de acceso",
  "specialRequirements": "‚ö†Ô∏è FORMATO OBLIGATORIO: Usar BULLETS (‚Ä¢) exclusivamente, NO listas numeradas. Usar SOLO requerimientos mencionados en la minuta. Ejemplo: ‚Ä¢ Tiempo de respuesta < 3s ‚Ä¢ Validaci√≥n HTTPS",
  "isAIGenerated": true
}

REGLAS ESPEC√çFICAS:
- useCaseName debe empezar con verbo infinitivo (Gestionar, Consultar, Procesar, etc.)
- fileName sigue patr√≥n: 2 letras + 3 n√∫meros + descripci√≥n (Ejemplo ilustrativo: BP005GestionarClientes)
- entityFields debe incluir TODOS los campos obligatorios del schema: name, type, mandatory, length, description, validationRules
- Tipos v√°lidos: "text", "number", "decimal", "date", "datetime", "boolean", "email"
- Para montos usar tipo "decimal", para IDs usar "number"
- entityFields incluir SIEMPRE campos de auditor√≠a con descripciones completas:
  * fechaAlta (date, mandatory: true, description: "Fecha de creaci√≥n del registro", validationRules: "Fecha v√°lida")
  * usuarioAlta (text, mandatory: true, length: 50, description: "Usuario que cre√≥ el registro", validationRules: "Usuario del sistema")
  * fechaModificacion (date, mandatory: false, description: "Fecha de √∫ltima modificaci√≥n", validationRules: "Fecha v√°lida")
  * usuarioModificacion (text, mandatory: false, length: 50, description: "Usuario que modific√≥", validationRules: "Usuario del sistema")
- Extraer informaci√≥n espec√≠fica del texto, NUNCA inventar datos gen√©ricos
`;
  }

  private getApiAnalysisRules(): string {
    return `
Para casos de uso tipo API/WEB SERVICE, extrae y estructura la siguiente informaci√≥n:

INSTRUCCIONES CR√çTICAS:
- NUNCA uses valores gen√©ricos o por defecto
- TODO ejemplo mostrado abajo es "Ejemplo ilustrativo, no debe reproducirse salvo que aplique"
- SIEMPRE extrae datos EXACTOS del texto de la minuta
- Si alg√∫n dato no est√° en la minuta, devuelve null o array vac√≠o seg√∫n corresponda
- Para el actor principal: Si no hay actor expl√≠cito, usar "Actor no identificado"

üö® REGLA CR√çTICA DE fileName:
- El fileName NUNCA debe incluir extensiones como .json, .docx, .xml, .txt, etc.
- Formato correcto: solo c√≥digo + descripci√≥n sin extensiones
- Ejemplo correcto: "API001ConsultarSaldo" (NO "API001ConsultarSaldo.json")
- Si encuentras extensiones, elim√≠nalas completamente

{
  "clientName": "Nombre del cliente/organizaci√≥n",
  "projectName": "Nombre del proyecto o sistema",
  "useCaseCode": "C√≥digo del caso de uso (Ejemplo ilustrativo: API001, WS002)",
  "useCaseName": "Nombre del servicio empezando con verbo infinitivo",
  "fileName": "Nombre de archivo siguiendo patr√≥n: 2letras+3n√∫meros+descripci√≥n",
  "description": "Descripci√≥n del prop√≥sito del API/servicio",
  "actorName": "actor principal del caso de uso o 'Actor no identificado' si no est√° expl√≠cito",
  "apiEndpoint": "URL del endpoint (Ejemplo ilustrativo: /api/v1/consulta-saldo)",
  "httpMethod": "M√©todo HTTP (GET, POST, PUT, DELETE)",
  "requestFormat": "Formato de request con ejemplos",
  "responseFormat": "Formato de response con ejemplos",
  "alternativeFlows": ["Error de autenticaci√≥n", "Timeout", "Datos no encontrados"],
  "businessRules": "‚Ä¢ Regla de autenticaci√≥n extra√≠da de la minuta ‚Ä¢ Regla de validaci√≥n espec√≠fica mencionada",
  "specialRequirements": "‚Ä¢ Seguridad SSL obligatoria ‚Ä¢ Rate limiting seg√∫n requerimientos",
  "isAIGenerated": true
}
`;
  }

  private getServiceAnalysisRules(): string {
    return `
Para casos de uso tipo SERVICIO/PROCESO, extrae y estructura la siguiente informaci√≥n:

üö® REGLA CR√çTICA DE fileName:
- El fileName NUNCA debe incluir extensiones como .json, .docx, .xml, .txt, etc.
- Formato correcto: solo c√≥digo + descripci√≥n sin extensiones
- Ejemplo correcto: "SRV001ProcesarPagos" (NO "SRV001ProcesarPagos.json")
- Si encuentras extensiones, elim√≠nalas completamente

üìã INSTRUCCIONES ESPEC√çFICAS PARA SERVICIOS/PROCESOS AUTOM√ÅTICOS:
- Busca informaci√≥n sobre frecuencia de ejecuci√≥n (diario, semanal, mensual, cada hora, etc.)
- Identifica horarios espec√≠ficos de ejecuci√≥n (02:00 AM, 18:30, etc.)
- Detecta rutas de archivos o directorios que deben ser configurables
- Identifica credenciales de web services, APIs o integraciones externas
- Extrae flujos alternativos relacionados con fallos del proceso

{
  "clientName": "Nombre del cliente/organizaci√≥n",
  "projectName": "Nombre del proyecto o sistema",
  "useCaseCode": "C√≥digo del caso de uso (ej: SRV001, PROC002)",
  "useCaseName": "Nombre del proceso empezando con verbo infinitivo",
  "fileName": "Nombre de archivo siguiendo patr√≥n: 2letras+3n√∫meros+descripci√≥n",
  "description": "Descripci√≥n completa del proceso autom√°tico y sus etapas",
  "serviceFrequency": "Frecuencia de ejecuci√≥n: Diariamente, Cada hora, Semanalmente, Mensualmente, etc. Si hay m√∫ltiples frecuencias, sep√°ralas con comas",
  "executionTime": "Hora(s) de ejecuci√≥n: 02:00 AM, 14:30, 23:59, etc. Si hay m√∫ltiples horarios, sep√°ralos con comas",
  "configurationPaths": "Si el proceso captura o genera archivos, lista las rutas que deben ser configurables. Ejemplo: /sftp/incoming/, /sftp/processed/, /logs/. Si no hay rutas, devuelve cadena vac√≠a",
  "webServiceCredentials": "Si llama a web services o APIs externas, indica qu√© credenciales deben ser configurables. Ejemplo: Usuario: srv_proceso, URL: https://api.ejemplo.com, M√©todo: OAuth 2.0. Si no hay servicios externos, devuelve cadena vac√≠a",
  "alternativeFlows": [
    "No se encuentran archivos en la ruta configurada",
    "Falla conexi√≥n con servicio externo",
    "Error en procesamiento de datos",
    "Timeout en operaci√≥n",
    "Proceso anterior no finaliz√≥"
  ],
  "businessRules": "‚Ä¢ Reglas de validaci√≥n de datos ‚Ä¢ L√≠mites de procesamiento ‚Ä¢ Horarios permitidos ‚Ä¢ Validaciones espec√≠ficas del negocio",
  "specialRequirements": "‚Ä¢ Integraci√≥n con sistemas externos ‚Ä¢ Monitoreo en tiempo real ‚Ä¢ Notificaciones por email ‚Ä¢ Backup autom√°tico ‚Ä¢ Encriptaci√≥n de datos",
  "generateTestCase": true,
  "testCaseObjective": "Verificar que el proceso autom√°tico ejecute correctamente todas sus etapas",
  "testCasePreconditions": "Archivos de prueba disponibles. Servicios externos accesibles. Base de datos en estado consistente",
  "isAIGenerated": true
}

EJEMPLOS DE EXTRACCI√ìN:
- Si el documento menciona "El proceso se ejecuta todos los d√≠as a las 2 AM", extrae:
  serviceFrequency: "Diariamente"
  executionTime: "02:00 AM"
  
- Si dice "captura archivos desde servidor SFTP", extrae:
  configurationPaths: "/sftp/incoming/, /sftp/processed/"
  
- Si menciona "integraci√≥n con API del BCRA", extrae:
  webServiceCredentials: "Usuario y URL del servicio BCRA deben ser configurables"
`;
  }

  private getReportsAnalysisRules(): string {
    return `
Para casos de uso tipo REPORTES, extrae y estructura la siguiente informaci√≥n:

INSTRUCCIONES CR√çTICAS PARA REPORTES:
- Los reportes son para CONSULTA y EXPORTACI√ìN de datos, NO para gesti√≥n o modificaci√≥n
- Busca informaci√≥n sobre formatos de exportaci√≥n, l√≠mites, agrupaciones, ordenamiento
- NO incluyas campos de entidad (entityFields) ya que los reportes no gestionan entidades

üö® REGLA CR√çTICA DE fileName:
- El fileName NUNCA debe incluir extensiones como .json, .docx, .xml, .txt, etc.
- Formato correcto: solo c√≥digo + descripci√≥n sin extensiones
- Ejemplo correcto: "TR101MostrarCodigosPedidos" (NO "TR101MostrarCodigosPedidos.json")

üìä CAMPOS ESPEC√çFICOS DE CONFIGURACI√ìN DE EXPORTACI√ìN:
{
  "clientName": "Nombre del cliente/organizaci√≥n",
  "projectName": "Nombre del proyecto o sistema",
  "useCaseCode": "C√≥digo del caso de uso (ej: TR101, REP001)",
  "useCaseName": "Nombre del reporte empezando con verbo infinitivo (Mostrar, Consultar, Generar)",
  "fileName": "Nombre de archivo siguiendo patr√≥n: c√≥digo+descripci√≥n",
  "description": "Descripci√≥n del prop√≥sito del reporte",
  "actorName": "Usuario o rol que ejecuta el reporte",
  "searchFilters": ["Filtros de b√∫squeda disponibles en el reporte"],
  "filtersDescription": "Descripci√≥n de los filtros de b√∫squeda",
  "resultColumns": ["Columnas que se mostrar√°n en el reporte"],
  "columnsDescription": "Descripci√≥n de las columnas del reporte",
  "exportFormats": ["Excel", "CSV", "PDF"],
  "exportMaxRecords": 10000,
  "exportGroupBy": ["Categor√≠a", "Departamento", "Mes"],
  "exportAggregation": ["Total ventas", "Promedio saldo", "Cantidad registros"],
  "exportDefaultSort": "Fecha descendente, Nombre ascendente",
  "exportSchedule": "Diario a las 9AM, Mensual el primer d√≠a",
  "exportRecipients": "gerencia@empresa.com, equipo-finanzas@empresa.com",
  "businessRules": "‚Ä¢ Solo usuarios autorizados pueden exportar ‚Ä¢ L√≠mite de 10000 registros por exportaci√≥n",
  "specialRequirements": "‚Ä¢ Formato Excel con m√∫ltiples hojas ‚Ä¢ Gr√°ficos incluidos en PDF",
  "isAIGenerated": true
}

EXTRACCI√ìN DE INFORMACI√ìN DE EXPORTACI√ìN:
- Si menciona "Excel, CSV, PDF", extrae en exportFormats
- Si dice "m√°ximo 10000 registros", extrae en exportMaxRecords  
- Si menciona "agrupar por departamento", extrae en exportGroupBy
- Si dice "suma total, promedio", extrae en exportAggregation
- Si menciona "ordenado por fecha", extrae en exportDefaultSort
- Si dice "enviar diariamente", extrae en exportSchedule
- Si menciona destinatarios de email, extrae en exportRecipients

IMPORTANTE:
- NO incluyas entityFields para reportes (solo son para gesti√≥n de entidades)
- searchFilters y resultColumns son los campos principales para reportes
- Si no encuentras informaci√≥n de exportaci√≥n espec√≠fica, usa valores por defecto razonables
`;
  }

  private parseAnalysisResult(result: string, useCaseType: UseCaseType): Partial<UseCaseFormData> {
    try {
      console.log('Raw AI analysis result:', result.substring(0, 200) + '...');
      
      // Check if the result is demo content
      if (result.includes('Demo Analysis') || result.includes('generateDemoAnalysis')) {
        console.log('Detected demo content in AI response, using fallback');
        return this.generateDemoAnalysis(useCaseType);
      }

      // Clean the result to ensure it's valid JSON
      const cleanedResult = result
        .replace(/^```json\s*/, '')
        .replace(/\s*```$/, '')
        .replace(/^```\s*/, '')
        .replace(/^\s*\{/, '{')
        .replace(/\}\s*$/, '}')
        .trim();

      console.log('Cleaned result for JSON parsing:', cleanedResult.substring(0, 200) + '...');

      // Apply additional cleaning for fileName extensions that AI might add incorrectly
      const finalCleanedResult = cleanedResult
        .replace(/"fileName":\s*"([^"]+)\.json"/g, '"fileName": "$1"')
        .replace(/"fileName":\s*"([^"]+)\.docx"/g, '"fileName": "$1"')
        .replace(/"fileName":\s*"([^"]+)\.xml"/g, '"fileName": "$1"')
        .replace(/"fileName":\s*"([^"]+)\.txt"/g, '"fileName": "$1"');

      const parsed = JSON.parse(finalCleanedResult);
      
      // Validation and correction of common AI parsing errors
      let correctedData = { ...parsed };
      
      // Additional validation for fileName to ensure no extensions
      if (correctedData.fileName && typeof correctedData.fileName === 'string') {
        correctedData.fileName = correctedData.fileName
          .replace(/\.(json|docx|xml|txt|pdf)$/i, '')
          .trim();
      }
      
      // Check if clientName contains a verb (likely mixed with useCaseName)
      const infinitiveVerbs = ['gestionar', 'crear', 'mostrar', 'consultar', 'ver', 'actualizar', 'eliminar', 'procesar'];
      if (correctedData.clientName && infinitiveVerbs.some(verb => correctedData.clientName.toLowerCase().includes(verb))) {
        console.warn('‚ö†Ô∏è clientName contains a verb, likely mixed with useCaseName');
        // Swap if needed
        if (correctedData.useCaseName && !infinitiveVerbs.some(verb => correctedData.useCaseName.toLowerCase().startsWith(verb))) {
          const temp = correctedData.clientName;
          correctedData.clientName = correctedData.useCaseName;
          correctedData.useCaseName = temp;
          console.log('‚úì Swapped clientName and useCaseName');
        }
      }
      
      // Validate useCaseName starts with infinitive verb
      if (correctedData.useCaseName && !infinitiveVerbs.some(verb => correctedData.useCaseName.toLowerCase().startsWith(verb))) {
        console.error('‚ö†Ô∏è useCaseName does not start with infinitive verb:', correctedData.useCaseName);
        // Try to fix common patterns
        if (correctedData.description && correctedData.description.toLowerCase().startsWith('mostrar')) {
          correctedData.useCaseName = correctedData.description;
          console.log('‚úì Fixed useCaseName from description');
        }
      }
      
      // Check if projectName is empty but can be inferred
      if (!correctedData.projectName || correctedData.projectName === null) {
        console.warn('‚ö†Ô∏è projectName is empty, trying to infer...');
        // Try to infer from context
        if (correctedData.useCaseName && correctedData.useCaseName.toLowerCase().includes('proveedores')) {
          correctedData.projectName = 'Sistema de Gesti√≥n de Proveedores';
        } else if (correctedData.useCaseName && correctedData.useCaseName.toLowerCase().includes('clientes')) {
          correctedData.projectName = 'Sistema de Gesti√≥n de Clientes';
        } else {
          correctedData.projectName = 'Sistema de Gesti√≥n';
        }
        console.log('‚úì Inferred projectName:', correctedData.projectName);
      }
      
      // Ensure service-specific fields are mapped correctly
      if (useCaseType === 'service') {
        console.log('üìã Processing service-specific fields:');
        console.log('  serviceFrequency:', correctedData.serviceFrequency);
        console.log('  executionTime:', correctedData.executionTime);
        console.log('  configurationPaths:', correctedData.configurationPaths);
        console.log('  webServiceCredentials:', correctedData.webServiceCredentials);
        
        // Ensure these fields are present even if empty
        correctedData.serviceFrequency = correctedData.serviceFrequency || '';
        correctedData.executionTime = correctedData.executionTime || '';
        correctedData.configurationPaths = correctedData.configurationPaths || '';
        correctedData.webServiceCredentials = correctedData.webServiceCredentials || '';
      }
      
      // Ensure the result includes the use case type and AI generated flag
      return {
        ...correctedData,
        useCaseType,
        isAIGenerated: true
      };
    } catch (error) {
      console.error('Error parsing AI analysis result:', error);
      console.error('Raw result was:', result.substring(0, 500));
      return this.generateDemoAnalysis(useCaseType);
    }
  }

  private generateDemoAnalysis(useCaseType: UseCaseType): Partial<UseCaseFormData> {
    const baseData = {
      clientName: "Banco Provincia",
      projectName: "Sistema de Gesti√≥n Integral",
      useCaseCode: "BP001",
      useCaseName: "Gestionar informaci√≥n del cliente",
      fileName: "BP001GestionarInformacionCliente",
      description: "Permite gestionar la informaci√≥n completa de los clientes del banco incluyendo consulta, actualizaci√≥n y seguimiento de la relaci√≥n comercial.",
      isAIGenerated: true,
      useCaseType
    };

    switch (useCaseType) {
      case 'entity':
        return {
          ...baseData,
          searchFilters: ["DNI/CUIT", "Apellido", "Email", "N√∫mero de Cliente"],
          filtersDescription: "Filtros de b√∫squeda para localizar clientes por diferentes criterios",
          resultColumns: ["ID Cliente", "Apellido y Nombres", "Documento", "Email", "Estado"],
          columnsDescription: "Columnas principales para mostrar en la grilla de resultados",
          entityFields: [
            { name: "clienteId", type: "number", mandatory: true, length: 10, description: "Identificador √∫nico del cliente", validationRules: "N√∫mero entero positivo" },
            { name: "tipoDocumento", type: "text", mandatory: true, length: 10, description: "Tipo de documento de identidad", validationRules: "DNI, CUIT, CUIL" },
            { name: "numeroDocumento", type: "text", mandatory: true, length: 20, description: "N√∫mero del documento de identidad", validationRules: "Solo n√∫meros, sin puntos ni guiones" },
            { name: "apellido", type: "text", mandatory: true, length: 100, description: "Apellido del cliente", validationRules: "Solo letras y espacios" },
            { name: "nombres", type: "text", mandatory: true, length: 100, description: "Nombres del cliente", validationRules: "Solo letras y espacios" },
            { name: "email", type: "text", mandatory: false, length: 150, description: "Correo electr√≥nico del cliente", validationRules: "Formato email v√°lido" },
            { name: "fechaAlta", type: "date", mandatory: true, description: "Fecha de creaci√≥n del registro", validationRules: "Formato ISO 8601" },
            { name: "usuarioAlta", type: "text", mandatory: true, length: 50, description: "Usuario que cre√≥ el registro", validationRules: "Debe existir en el sistema" }
          ],
          fieldsDescription: "Campos principales de la entidad cliente con informaci√≥n personal y de auditor√≠a",
          wireframeDescriptions: ["Pantalla de b√∫squeda con filtros", "Grilla de resultados paginada", "Detalle del cliente"],
          wireframesDescription: "Pantallas necesarias para la gesti√≥n completa de clientes",
          businessRules: "1. Solo usuarios autorizados pueden acceder\n2. Validar documento con organismos oficiales",
          specialRequirements: "1. Auditor√≠a completa de cambios\n2. Integraci√≥n con servicios externos"
        };

      case 'api':
        return {
          ...baseData,
          useCaseName: "Consultar saldo de cuenta",
          fileName: "BP001ConsultarSaldoCuenta",
          apiEndpoint: "/api/v1/consulta-saldo",

          requestFormat: `{
  "numeroCliente": "12345678",
  "numeroCuenta": "001-234567-8",
  "tipoConsulta": "SALDO_ACTUAL"
}`,
          responseFormat: `{
  "success": true,
  "data": {
    "saldo": 15000.50,
    "moneda": "ARS",
    "fechaConsulta": "2025-01-27T10:30:00Z"
  }
}`,
          businessRules: "1. Autenticaci√≥n obligatoria\n2. Rate limiting por cliente",
          specialRequirements: "1. Encriptaci√≥n SSL\n2. Logs de auditor√≠a"
        };

      case 'service':
        return {
          ...baseData,
          useCaseName: "Procesar cierre diario",
          fileName: "BP001ProcesarCierreDiario",
          serviceFrequency: "Diariamente, Fin de mes",
          executionTime: "23:00, 00:30",
          configurationPaths: "/batch/input/, /batch/output/, /batch/logs/",
          webServiceCredentials: "Usuario: srv_batch, URL: https://api.banco.com/v1/cierre, M√©todo: OAuth 2.0",
          businessRules: "1. Ejecutar solo en d√≠as h√°biles\n2. Generar backup antes del proceso\n3. Validar integridad de datos antes de procesar",
          specialRequirements: "1. Logging detallado\n2. Alertas por email\n3. Mecanismo de rollback\n4. Integraci√≥n con sistema de monitoreo"
        };

      case 'reports':
        return {
          ...baseData,
          useCaseName: "Mostrar movimientos de cuenta",
          fileName: "BP001MostrarMovimientosCuenta",
          description: "Permite consultar y exportar los movimientos de cuentas bancarias con diferentes filtros y formatos de exportaci√≥n.",
          searchFilters: ["Fecha Desde", "Fecha Hasta", "N√∫mero de Cuenta", "Tipo de Movimiento"],
          filtersDescription: "Filtros para b√∫squeda de movimientos por per√≠odo, cuenta y tipo",
          resultColumns: ["Fecha", "Descripci√≥n", "D√©bito", "Cr√©dito", "Saldo"],
          columnsDescription: "Columnas del reporte mostrando detalle de cada movimiento",
          exportFormats: ["Excel", "CSV", "PDF"],
          exportMaxRecords: 10000,
          exportGroupBy: ["Categor√≠a", "Departamento", "Mes"],
          exportAggregation: ["Total ventas", "Promedio saldo", "Cantidad registros"],
          exportDefaultSort: "Fecha descendente, Nombre ascendente",
          exportSchedule: "Diario a las 9AM, Mensual el primer d√≠a",
          exportRecipients: "gerencia@empresa.com, equipo-finanzas@empresa.com",
          businessRules: "‚Ä¢ Solo usuarios autorizados pueden exportar\n‚Ä¢ L√≠mite de 10000 registros por exportaci√≥n\n‚Ä¢ Los reportes deben cumplir con normativas del BCRA",
          specialRequirements: "‚Ä¢ Formato Excel con m√∫ltiples hojas\n‚Ä¢ Gr√°ficos incluidos en PDF\n‚Ä¢ Firma digital en reportes oficiales"
        };

      default:
        return baseData;
    }
  }
}