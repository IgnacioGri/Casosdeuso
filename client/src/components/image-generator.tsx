import { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Image, Download } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface ImageGenerationRequest {
  prompt: string;
  fileName?: string;
}

interface ImageGenerationResponse {
  success: boolean;
  error?: string;
  imageUrl?: string;
  imagePath?: string;
}

export function ImageGenerator() {
  const [prompt, setPrompt] = useState('');
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const { toast } = useToast();

  const generateImageMutation = useMutation({
    mutationFn: async (request: ImageGenerationRequest): Promise<ImageGenerationResponse> => {
      const response = await fetch('/api/generate-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(request),
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate image');
      }
      
      return response.json();
    },
    onSuccess: (data) => {
      if (data.success && data.imageUrl) {
        setGeneratedImage(data.imageUrl);
        toast({
          title: "Imagen generada exitosamente",
          description: "Tu imagen ha sido creada y guardada.",
        });
      } else {
        toast({
          title: "Error al generar imagen",
          description: data.error || "Error desconocido",
          variant: "destructive",
        });
      }
    },
    onError: (error) => {
      toast({
        title: "Error al generar imagen",
        description: error instanceof Error ? error.message : "Error desconocido",
        variant: "destructive",
      });
    },
  });

  const handleGenerate = () => {
    if (!prompt.trim()) {
      toast({
        title: "Prompt requerido",
        description: "Por favor ingresa una descripción para generar la imagen.",
        variant: "destructive",
      });
      return;
    }

    generateImageMutation.mutate({ prompt: prompt.trim() });
  };

  const handleDownload = () => {
    if (generatedImage) {
      const link = document.createElement('a');
      link.href = generatedImage;
      link.download = `generated-image-${Date.now()}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Image className="w-5 h-5" />
          Generador de Imágenes con IA
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <label htmlFor="prompt" className="text-sm font-medium">
            Descripción de la imagen
          </label>
          <Input
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe la imagen que quieres generar..."
            disabled={generateImageMutation.isPending}
          />
        </div>

        <Button 
          onClick={handleGenerate}
          disabled={generateImageMutation.isPending || !prompt.trim()}
          className="w-full"
        >
          {generateImageMutation.isPending ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              Generando imagen...
            </>
          ) : (
            <>
              <Image className="w-4 h-4 mr-2" />
              Generar imagen
            </>
          )}
        </Button>

        {generatedImage && (
          <div className="space-y-4">
            <div className="border rounded-lg p-4">
              <img
                src={generatedImage}
                alt="Generated by AI"
                className="w-full max-w-md mx-auto rounded-lg shadow-sm"
                style={{ display: 'block' }}
              />
            </div>
            <Button 
              onClick={handleDownload}
              variant="outline"
              className="w-full"
            >
              <Download className="w-4 h-4 mr-2" />
              Descargar imagen
            </Button>
          </div>
        )}

        <div className="text-xs text-muted-foreground">
          <p>Esta función utiliza Gemini AI para generar imágenes basadas en tu descripción.</p>
          <p>Las imágenes se guardan en el directorio attached_assets/generated_images/</p>
        </div>
      </CardContent>
    </Card>
  );
}